# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xv0BM51rZY1PfNYziQTbtOh3wDSsbszD
"""

import os
import pandas as pd
import numpy as np
 
#Convert to user-movie rating matrix and calculate similarity between users
#To load data, we only use the first three columns of data, which are user ID, movie ID, and the corresponding ratings of the user to the movie.
#Convert movie IDs to column names into a User-Movie rating matrix
#Calculate similarity between users 

data_path = "./ratings.csv"
dtype = {"userId": np.int32, "movieId": np.int32, "rating": np.float32}
ratings = pd.read_csv(data_path, dtype=dtype, usecols=range(3))
ratings_matrix = ratings.pivot_table(index=["userId"], columns=["movieId"],values="rating")
item_similar = ratings_matrix.corr()
 
#Predict user ratings for items (take user 1 rating movie 1 as an example
 

 
# Combine the similarity between the iid item 
# and its similar items and the uid user's rating on its similar items to predict the uid's rating on the iid
#Numerator and denominator

 
 
#Predict the rating of any user for any movie

def predict(uid, iid, ratings_matrix, user_similar):
    '''
    :param uid: user ID
    :param iid: item ID
    :param ratings_matrix: User-Item Rating Matrix
    :param user_similar: User similarity matrix
    :return: Predicted rating v
    '''
    print("user <%d>rating<%d>..."%(uid, iid))
    # Find similar users of uid user
    similar_users = user_similar[uid].drop([uid]).dropna()
    similar_users = similar_users.where(similar_users>0).dropna()
    if similar_users.empty is True:
        raise Exception("user<%d>no similar users" % uid)
 
    # Filter out the neighbor users who have rating records for the iid item from the similar users of the uid user's neighbors
    ids = set(ratings_matrix[iid].dropna().index)&set(similar_users.index)
    finally_similar_users = similar_users.loc[list(ids)]
 
    # 
    numerator = 0    
    denominator = 0    
    for sim_uid, similarity in finally_similar_users.iteritems():
        
        sim_user_rated_movies = ratings_matrix.loc[sim_uid].dropna()
        
        sim_user_rating_for_item = sim_user_rated_movies[iid]
        
        numerator += similarity * sim_user_rating_for_item
      
        denominator += similarity
 
    
    predict_rating = numerator/denominator

    # !!!! you can change user and movies here
    print("predict users<%d>to movie rating<%d>ï¼š%0.2f" % (1, 1, predict_rating))
    return round(predict_rating, 2)
    # !!!!
 
 
#Predict all movie ratings for a user
def predict_all(uid, ratings_matrix, item_similar):
    
    
    item_ids = ratings_matrix.columns
    
    for iid in item_ids:
        try:
            rating = predict(uid, iid, ratings_matrix, item_similar)
        except Exception as e:
            print(e)
        else:
            yield uid, iid, rating
 
#-Recommend topN movies for the specified user according to the rating
 
def top_k_rs_result(k):
    #rating
    results = predict_all(1, ratings_matrix, item_similar)
    return sorted(results, key=lambda x: x[2], reverse=True)[:k]
 
if __name__ == '__main__':
    for i in predict_all(1, ratings_matrix, item_similar):
        pass
 
    # top 20 movies
    result = top_k_rs_result(20)
    print(result)